#!/usr/bin/env node

var eachFile = require('dir-each/series').withSyms
var writeFile = require('writefile')
var program = require('commander')
var fs = require('lift-result/fs')
var lift = require('lift-result')
var map = require('map/series')
var Result = require('result')
var path = require('path')

program.version(require('../package').version)
	.usage('template [target directory]')
	.option('-r, --rename', 'prompt for name before writing files')
	.option('-s, --source [path]', 'where to look for templates [~/.fsplates]', process.env.HOME + '/.fsplates')
	.option('-c, --config [path]', 'data [~/.fsplates/.config.json]', process.env.HOME + '/.fsplates/.config.json')

program.on('--help', function () {
	console.log('')
	console.log('  Note: you will be prompted for any values not in `config`')
	console.log('  and no files will be overwritten without your confirmation')
	console.log('')
	console.log('  Examples: ')
	console.log('')
	console.log('    # simple one file')
	console.log('    $ fsplate Makefile')
	console.log('')
	console.log('    # rename')
	console.log('    $ fsplate -r Readme.md')
	console.log('    Readme.md is available. Do you have a prefered name: $')
	console.log('')
	console.log('    # target a sub-directory')
	console.log('    $ fsplate component my-component')
	console.log('')
})

program.parse(process.argv)

var template = program.args[0]

if (!template) {
	console.warn('template required')
	program.help()
	process.exit(1)
}

// directory to write to

var destination = program.args[1] 
	? path.resolve(program.args[1])
	: process.cwd()

program.source = path.resolve(program.source)
template = path.join(program.source, template)
var cache = require(program.config)
var baseDir = template

var concat = lift(function(a, b){
	return a.concat(b)
})

var toObject = lift(function(keys){
	var obj = {}
	for (var i = 0, len = keys.length; i < len; i++) {
		obj[keys[i]] = null
	}
	return obj
})

/**
 * determine required variables
 *
 * @param {String} txt
 * @return {Array}
 */

var vars = lift(function(txt){
	var vars = []
	var reg = /\{{2}([^}]*)\}{2}/g
	var m
	while (m = reg.exec(txt)) {
		if (vars.indexOf(m[1]) == -1) {
			vars.push(m[1])
		}
	}
	return vars
})

/**
 * replace vars with values in `txt`
 */

var interpolate = lift(function(txt, dict){
	while ((/\{{2}([^}]*)\}{2}/g).exec(txt)) {
		txt = RegExp.leftContext
			+ dict[RegExp.$1]
			+ RegExp.rightContext
	}
	return txt
})

/**
 * render a file template
 * 
 * @param {String} source path
 * @return {Result}
 */

function render(source){
	var name = path.relative(baseDir, source)
	var txt = fs.readFile(source, 'utf8')
	var attrs = concat(vars(source), vars(txt))
	var dict = map(toObject(attrs), function(_, attr){
		if (attr in cache) return cache[attr]
		return cache[attr] = prompt(attr)
	})
	return writeSafely(
		interpolate(name, dict),
		interpolate(txt, dict))
}

/**
 * write the file to its destination with
 * safety check
 * 
 * @param {String} name
 * @param {String} txt
 * @return {Result}
 */

var writeSafely = lift(function(name, txt){
	name = path.join(destination, name)

	if (program.rename) {
		var msg = path.basename(name)
			+ (fs.existsSync(name)
					? ' exists'
					: ' is available')
			+ '. Do you have a prefered name'
		return prompt(msg).then(function(res){
			if (res) name = path.join(path.dirname(name), res)
			return writeFile(name, txt)
		})
	}
	if (!fs.existsSync(name)) return writeFile(name, txt)
	var shortname = path.relative(process.cwd(), name)
	return confirm('overwrite ' + shortname).then(function(ok){
		if (ok) return writeFile(name, txt)
	})
})

/**
 * ask the user for input
 * 
 * @param {String} what
 * @return {Result}
 */

function prompt(what){
	var result = new Result
	program.prompt(what + ': ', function(value){
		result.write(value)
	})
	return result
}

function confirm(what){
	var result = new Result
	program.confirm(what + '? ', function(yes){
		result.write(yes)
	})
	return result	
}

// iterate through the templates

if (fs.statSync(template).isDirectory()) {
	eachFile(template, render).read(pause)
} else {
	var baseDir = path.dirname(baseDir)
	render(template).read(pause)
}

function pause(){
	process.stdin.pause()
}